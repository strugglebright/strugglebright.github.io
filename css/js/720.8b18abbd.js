"use strict";(self.webpackChunkbright_blog=self.webpackChunkbright_blog||[]).push([[720],{6806:function(n,e,t){t.d(e,{A:function(){return i}});var i=[{name:"svg线条动画",code:'\n<template>\n<div class="demo">\n  <svg xmlns="http://www.w3.org/2000/svg" version="1.1">\n    <defs>\n      <linearGradient\n        id="leaderGradient"\n        x1="0%"\n        y1="0%"\n        x2="100%"\n        y2="0%"\n        gradientUnits="userSpaceOnUse"\n      >\n        <stop offset="0" style="stop-color: rgb(11, 227, 255)"></stop>\n        <stop offset="1" style="stop-color: rgb(2, 176, 253)"></stop>\n      </linearGradient>\n    </defs>\n    <line\n    class="animationLine"\n      x1="0"\n      y1="0"\n      x2="200"\n      y2="0"\n      stroke-dasharray="22,11"\n      stroke-dashoffset="33"\n      stroke="url(#leaderGradient)"\n      stroke-width="11"\n    />\n  </svg>\n</div>\n</template>\n<style lang="less" scoped>\n.demo{\n  height:420px;\n  display:flex;\n  align-items: center;\n  justify-content: center;\n}\nsvg{\n  width: 200px;\n  height: 10px;\n}\n.animationLine{\nanimation: dash 0.5s linear infinite;\n}\npath {\nanimation: dash 0.5s linear infinite;\n}\n\n@keyframes dash {\nto {\n  stroke-dashoffset: 0;\n}\nfrom {\n  stroke-dashoffset: 33;\n}\n}\n</style>\n',keys:["svg"]},{name:"svg管道动画",code:'<template>\n<div class="container">\n  <svg\n    width="100%"\n    height="100%"\n    version="1.1"\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0,0,1053,600"\n  >\n    <linearGradient id="linear" x1="0%" y1="0%" x2="100%" y2="0%">\n      <stop offset="0%" stop-color="#ffe505" />\n      <stop offset="100%" stop-color="red" />\n    </linearGradient>\n      <linearGradient id="linear2" x1="0%" y1="0%" x2="100%" y2="0%">\n      <stop stop-color="#000" />\n    </linearGradient>\n    \x3c!-- SVG 线性渐变 - <linearGradient> 当y1和y2相等，而x1和x2不同时，可创建水平渐变 --\x3e\n    \x3c!-- 渐变的颜色范围可由两种或多种颜色组成。每种颜色通过一个<stop>标签来规定。offset属性用来定义渐变的开始和结束位置 --\x3e\n   \n    <polyline\n      stroke-dasharray="30, 0"\n      stroke-width="20"\n      stroke-linecap="round"\n      points="300 130,300 375,390 535,530 475,385,270"\n      style="fill: transparent; stroke: url(#linear2)"\n    />\n     <polyline\n      stroke-dasharray="30, 20"\n      stroke-width="10"\n      stroke-linecap="round"\n      points="300 130,300 375,390 535,530 475,385,270"\n      style="fill: transparent; stroke: url(#linear)"\n    />\n    \x3c!-- <polyline> 元素是用于创建任何只有直线的形状 --\x3e\n    \x3c!-- stroke-dasharray属性用于创建虚线：第一个值表示每一节的长度，第二个值表示每一节之间的间隙长度 --\x3e\n    \x3c!-- stroke 定义颜色 --\x3e\n    \x3c!-- 标签层级是按照先后顺序来的，前面的polyline是底部黑色背景,后面的polyline是管道流动元素 --\x3e\n  </svg>\n</div>\n</template>\n\n<style>\n.container {\nwidth: 1053px;\nheight: 600px;\n}\npolyline {\nanimation: dash 5000s linear infinite; \n/* linear动画从头到尾的速度是相同的 */\n/* infinite动画应该播放无限次 */\n}\n\n@keyframes dash {\nto {\n  stroke-dashoffset: -200000;\n  /* 当stroke-dashoffset为负值时，路径的绘制会从路径末端开始： */\n}\n}\n</style>',keys:["svg"]},{name:"svg流光充电效果",code:'<template>\n<div class="demo">\n  <svg\n    version="1.1"\n    xmlns="http://www.w3.org/2000/svg"\n    xmlns:xlink="http://www.w3.org/1999/xlink"\n    xml:space="preserve"\n    class="circle-load-rect-svg"\n    viewbox="0 0 1200 400"\n  >\n    \x3c!-- 第1条线 --\x3e\n    <polyline\n      points="200,50 200,30 530,30 530,97"\n      fill="none"\n      class="g-rect-path"\n      stroke="#007084"\n    />\n    \x3c!-- 第1个光点 --\x3e\n    <polyline\n      points="200,50 200,30 530,30 530,97"\n      fill="none"\n      class="g-rect-fill"\n      stroke="#0f0"\n    />\n    \x3c!-- 第2条线 --\x3e\n    <polyline\n      points="210,50 210,20 630,20 630,97"\n      fill="none"\n      class="g-rect-path"\n      stroke="#007084"\n    />\n    \x3c!-- 第2个光点 --\x3e\n\n    <polyline\n      points="210,50 210,20 630,20 630,97"\n      fill="none"\n      class="g-rect-fill"\n      stroke="#0f0"\n    />\n    \x3c!-- 第三条线 --\x3e\n    <polyline\n      points="220,50 220,10 730,10 730,97"\n      fill="none"\n      class="g-rect-path"\n      stroke="#007084"\n      id="pathName"\n    />\n    \x3c!-- 第三个光点 --\x3e\n    <polyline\n      points="220,50 220,10 730,10 730,97"\n      fill="none"\n      class="g-rect-fill"\n      stroke="#0f0"\n    />\n    <g\n      style="\n        transform-box: fill-box;\n        transform: rotate(90deg) translate(35px, -230px);\n      "\n    >\n      <rect\n        x="32"\n        y="15"\n        width="10"\n        height="5"\n        style="fill: white; stroke: #007084; stroke-width: 2"\n      />\n      <rect\n        x="25"\n        y="20"\n        width="25"\n        height="50"\n        style="fill: white; stroke: #007084; stroke-width: 2"\n      />\n      <rect\n        id="quantity_1"\n        x="26"\n        y="70"\n        width="23"\n        height="0"\n        style="fill: #0f0"\n      />\n    </g>\n  </svg>\n</div>\n</template>\n\n<script>\nexport default {\ndata() {\n  return {\n    q:0\n  };\n},\nmounted() {\n  let path = document.getElementById("pathName");\n  let len = path.getTotalLength(); // 获取最长的长度为 637\n\n  this.ShowCharge()\n},\nmethods: {\n  ShowCharge() {\n    let quantity_1 = document.getElementById("quantity_1");\n    this.q = this.q + 1; //  控制充电速度\n    if (this.q > 100) this.q = 0;\n    let h = this.q * 0.5; //电量高度\n    let y = 70 - h; //电量显示的起始位置\n    quantity_1.setAttribute("y", y);\n    quantity_1.setAttribute("height", h);\n    requestAnimationFrame(this.ShowCharge);  //  使用帧动画可以提升性能\n  },\n},\n};\n<\/script>\n<style lang="less" scoped>\n.demo {\npadding-top: 100px;\n.circle-load-rect-svg {\n  width: 1200px;\n  height: 400px;\n}\n.g-rect-fill {\n  fill: none;\n  stroke-width: 5;\n  stroke-linejoin: round;\n  stroke-linecap: round;\n  stroke-dasharray: 3, 200;\n  /* 分成3段 每段长度 200 */\n  stroke-dashoffset: -637;\n  animation: ponitMove 5s linear infinite;\n}\n\n@keyframes ponitMove {\n  0% {\n    stroke-dashoffset: -637;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n}\n}\n</style>',keys:["svg"]},{name:"svg图形动画",code:'<template>\n<div>\n  <svg width="580" height="400">\n    <path\n      id="pathName"\n      stroke-dasharray="655"\n      stroke-dashoffset="655"\n      d="m262.59622,90.56177l34.74561,60.80042l-14.32703,7.17541l43.75135,52.09264l-14.32061,8.69967l54.08581,87.23186l-91.73919,-66.84884l17.49797,-9.28344l-57,-42.81731l20.425,-13.23194l-60.18379,-44.91723l67.06487,-38.90124z"\n    />\n  </svg>\n</div>\n</template>\n\n<script>\nexport default {\nmounted() {\n  let path = document.getElementById("pathName");\n  let len = path.getTotalLength();  // 655\n// getTotalLength 方法返回用户代理对路径总长度\n},\n};\n<\/script>\n\n<style lang="less" scoped>\npath {\nstroke: #0f0;\nfill: transparent;\nstroke-width: 1.5px;\nanimation: act 5s linear forwards;\n/* linear动画从头到尾的速度是相同的 */\n/* forwards从一个地方移动到另一个地方，并让它停留在那里 */\n}\n@keyframes act {\n100% {\n  // stroke: #0f0;\n  // fill: #0f0;\n  stroke-dashoffset: 0;\n}\n}\n</style>',keys:["svg"]},{name:"简易圆环进度条",code:'\n<template>\n  <div>\n    <div class="speed">\n      <input type="number" v-model="speed" />\n      <button @click="setAnimationFun">设置动画</button>\n    </div>\n    <div class="card">\n      <div class="rating">\n        <h2>\n          <span class="counter">{{ speedValue }}%</span>\n          <br />\n          HTML\n        </h2>\n        <div\n          class="block"\n          v-for="item in 100"\n          :key="item"\n          :class="[item <= speedValue ? \'back_color\' : \'\']"\n          :style="`transform: rotate(${3.6 * item}deg)`"\n        ></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      speed: 10,\n      speedValue: 10,\n    };\n  },\n  methods: {\n    setAnimationFun() {\n      if (this.speed > 100) {\n        alert("不能超过100");\n        return;\n      }\n      this.speedValue = 0;\n      if (this.speed > 0) {\n        let timer = setInterval(() => {\n          this.speedValue++;\n          if (this.speedValue >= this.speed) {\n            clearInterval(timer);\n          }\n        }, 10);\n      }\n    },\n  }\n};\n<\/script>\n\n<style lang="less" scoped>\n.card {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n}\n.rating {\n  width: 400px;\n  height: 400px;\n  display: flex;\n  justify-content: center;\n  padding-top: 100px;\n  background-color: #ededed;\n  h2 {\n    padding-top: 70px;\n    text-align: center;\n  }\n}\n.block {\n  position: absolute;\n  width: 2px;\n  height: 15px;\n  background: #cccccc;\n  left: 50%;\n  transform-origin: 50% 100px;\n}\n.back_color {\n  background-color: #0f0;\n}\n.speed{\n  color: #000;\n  input{\n    background-color: #ffffff;\n  }\n  button{\n    background-color: #ffffff;\n  }\n}\n</style>',keys:["css","js"]},{name:"canvas小球",code:'\n<template>\n  <div class="demo">\n    <canvas\n      id="myCanvas"\n      width="500"\n      height="500"\n      style="border: 1px solid #c3c3c3"\n    >\n    </canvas>\n    <div class="menuButton">\n      <button @click="generateFun">开始生成</button>\n      <button @click="stopFun">停止移动</button>\n    </div>\n  </div>\n</template>\n<script>\nclass Person {\n  constructor(ctx, w, h) {\n    this.ctx = ctx\n    this.w = w\n    this.h = h\n    this.bar_x = this.randomFun(10, 460)\n    this.bar_y = this.randomFun(10, 460)\n    this.bar_r = 10\n    this.bar_speedX = this.randomFun(-20, 20)\n    this.bar_speedY = this.randomFun(-20, 20)\n  }\n  //生成小球\n  drawBar() {\n    this.ctx.beginPath();\n    this.ctx.arc(this.bar_x, this.bar_y, this.bar_r , 0, Math.PI * 2);\n    this.ctx.fillStyle = "red";\n    this.ctx.fill();\n  }\n  // 小球移动 到达边界取反\n  moveBar() {\n    this.bar_x += this.bar_speedX;\n    this.bar_y += this.bar_speedY;\n    if (this.bar_x + this.bar_speedX > this.w || this.bar_x + this.bar_speedX < 0) {\n      this.bar_speedX = -this.bar_speedX;\n    }\n    if (this.bar_y + this.bar_speedY > this.h || this.bar_y + this.bar_speedY < 0) {\n      this.bar_speedY = -this.bar_speedY;\n    }\n  }\n  // 随机范围\n  randomFun(a, b) {\n    return Math.floor(Math.random() * (b - a + 1) + a);\n  }\n}\nexport default {\n  data() {\n    return {\n      w: 500,\n      h: 500,\n      ctx: null,\n      setVal: null,\n    };\n  },\n  methods: {\n    generateFun() {\n      clearInterval(this.setVal);\n      const p = new Person(this.ctx, this.w, this.h);\n      this.setVal = setInterval(() => {\n        this.ctx.fillStyle = "rgba(255,255,255,0.5)";\n        this.ctx.fillRect(0, 0, this.w, this.h); //半透明的 fillRect() 函数制作长尾效果。\n        p.drawBar();\n        p.moveBar();\n      }, 30);\n    },\n    stopFun() {\n      clearInterval(this.setVal);\n    },\n  },\n  mounted() {\n    const c = document.getElementById("myCanvas");\n    this.ctx = c.getContext("2d");\n  },\n};\n<\/script>\n<style lang="less" scoped>\n.menuButton{\n  display: flex;\n  margin-top:10px;\n  button{\n    background: #fff;\n    border-radius: 4px;\n    padding: 5px;\n    color: #000000;\n    margin-right:10px;\n  }\n}\n</style>\n',keys:["canvas"]},{name:"横向loading动画",code:'\n<template>\n  <div class="demo">\n    <div class="loading">\n      <span style="--i: 1"></span>\n      <span style="--i: 2"></span>\n      <span style="--i: 3"></span>\n      <span style="--i: 4"></span>\n      <span style="--i: 5"></span>\n      <span style="--i: 6"></span>\n      <span style="--i: 7"></span>\n      <span style="--i: 8"></span>\n      <span style="--i: 9"></span>\n      <span style="--i: 10"></span>\n      <span style="--i: 11"></span>\n      <span style="--i: 12"></span>\n      <span style="--i: 13"></span>\n      <span style="--i: 14"></span>\n      <span style="--i: 15"></span>\n      <span style="--i: 16"></span>\n      <span style="--i: 17"></span>\n      <span style="--i: 18"></span>\n      <span style="--i: 19"></span>\n      <span style="--i: 20"></span>\n    </div>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo{\n    height:420px;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n  .loading{\n    position: relative;\n    display: flex;\n    gap:15px;\n    span{\n      width: 5px;\n      height: 20px;\n      background: transparent;\n      position: relative;\n    }\n    span::before{\n      content:\'\';\n      position:absolute;\n      inset:0;\n      animation:animate 8s linear infinite;\n      animation-delay: calc(var(--i)*0.1s);\n    }\n    @keyframes animate {\n      0%{\n        background: #0f0;\n        box-shadow: 0 0 5px #0f0,\n        0 0 15px #0f0,\n        0 0 30px #0f0,\n        0 0 50px #0f0;\n        rotate:0deg;\n      }\n      20%{\n        background: #0f0;\n        box-shadow: 0 0 5px #0f0,\n        0 0 15px #0f0,\n        0 0 30px #0f0,\n        0 0 50px #0f0;\n        rotate:0deg;\n      }\n      40%{\n        background: #0f0;\n        box-shadow: 0 0 5px #0f0,\n        0 0 15px #0f0,\n        0 0 30px #0f0,\n        0 0 50px #0f0;\n        rotate:90deg;\n        transform-origin: bottom;\n        filter: hue-rotate(0deg);        \n      }\n      80%{\n        background: #0f0;\n        box-shadow: 0 0 5px #0f0,\n        0 0 15px #0f0,\n        0 0 30px #0f0,\n        0 0 50px #0f0;\n        rotate:90deg;\n        transform-origin: bottom; // 原点的纵坐标为bottom\n        filter: hue-rotate(360deg); // 色调旋转滤镜： h 代表色相 这个值变化，颜色就会不停的变,旋转一周会变一个色,不停旋转不停的变        \n      }\n      90%{\n        background: red;\n        box-shadow: none;\n        rotate:0deg;\n      }\n      100%{\n        background: red;\n        box-shadow: none;        \n      }\n    }\n  }\n}\n</style>',keys:["css","js"]},{name:"流星旋转动画",code:'\n<template>\n  <div class="demo">\n    <div class="loader"></div>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo {\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #001d30;\n  .loader {\n    position: relative;\n    width: 150px;\n    height: 150px;\n    background: linear-gradient(to top, #001d30 40%, #51eeee);\n    border-radius: 50%;\n    animation: rotate 5s linear infinite;\n  }\n  @keyframes rotate {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  .loader::before {\n    content: "";\n    position: absolute;\n    background: #001d30;\n    inset: 20px 20px 0 0;\n    border-radius: 50%;\n  }\n  .loader::after {\n    content: "";\n    position: absolute;\n    top: 50px;\n    right: -8px;\n    width: 40px;\n    height: 40px;\n    background: #51eeee;\n    border-radius: 50%;\n    box-shadow: 0 0 5px #51eeee, 0 0 25px #51eeee, 0 0 50px #51eeee,\n      0 0 75px #51eeee;\n  }\n}\n</style>',keys:["css"]},{name:"css反弹",code:'\n<template>\n  <div class="demo">\n    <div class="bounce"></div>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo {\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .bounce {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background-color: #0f0;\n    animation: bounce 1s ease-in-out infinite;\n    transform-origin: center bottom;\n  }\n  @keyframes bounce {\n    0%,\n    100% {\n      transform: translate(0, 0);\n    }\n    50% {\n      transform: translate(0, -40px);\n      animation-timing-function: cubic-bezier(0.5,1.6,0.4,0.8);  // 指定动画将如何完成一个周期  这个反弹有点生硬，可以去掉\n    }\n  }\n}\n</style>',keys:["css","js"]},{name:"动态设置仪表盘",code:'\n<template>\n  <div>\n    <div class="chartDemo">\n      <comGaugeNew\n        :data="chart3.data"\n        :seriesTop="chart3.seriesTop"\n        :seriesBot="chart3.seriesBot"\n        :gradient="chart3.gradient"\n        :gaugeSection="chart3.gaugeSection"\n        ref="chart3"\n      ></comGaugeNew>\n    </div>\n    <div class="flex">\n      <div class="white">\n        <span>大于等于</span>\n        <input v-model:value="value1" :min="-30" :max="50" />\n        <span>℃</span>\n      </div>\n      <div class="white">\n        <span>小于等于</span>\n        <input v-model:value="value2" :min="-30" :max="50" />\n        <span>℃</span>\n      </div>\n      <Button @click="randomClick">随机生成</Button>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      chart3: {\n          data: 100,\n          gradient: {\n              x: 0,\n              y: 0,\n              x2: 1,\n              y2: 1,\n          },\n          gaugeSection: [\n              "0.25",\n              "0.875",\n              "1",\n          ],\n          seriesBot: {\n              type: "gauge",\n              radius: "100%",\n              z: 3,\n              min: -30,\n              max: 50,\n              center: ["50%", "80%"],\n              startAngle: 180,\n              endAngle: 0,\n              pointer: {\n                  show: false,\n              },\n              axisLine: {\n                  show: true,\n                  lineStyle: {\n                      width: 28,\n                      color: [["0", "#eff1ff"], ["0", {\n                          type: \'linear\',\n                          x: 0,\n                          y: 0,\n                          x2: 1,\n                          y2: 1,\n                          colorStops: [{\n                              offset: 0, color: \'rgba(186, 241, 252,1)\'\n                          }, {\n                              offset: 1, color: \'rgba(238, 230, 205,1)\'\n                          }],\n                          global: false\n                      }], ["1", "#eff1ff"],],\n                  },\n              },\n          },\n          seriesTop: {\n              type: "gauge",\n              splitNumber: 8,\n              z: 9,\n              radius: "100%",\n              min: -30,\n              max: 50,\n              center: ["50%", "80%"],\n              startAngle: 180,\n              endAngle: 0,\n              pointer: {\n                  show: false\n              },\n              axisLabel: {\n                  show: true,\n                  color: "#999",\n                  distance: -22,\n              },\n              axisLine: {\n                  show: true,\n                  lineStyle: {\n                      width: 10,\n                      color: [["0", "transparent"], ["0", {\n                          type: \'linear\',\n                          x: 0,\n                          y: 0,\n                          x2: 1,\n                          y2: 1,\n                          colorStops: [{\n                              offset: 0, color: \'rgba(18, 220, 254,1)\'\n                          }, {\n                              offset: 1, color: \'rgba(245, 123, 1,1)\'\n                          }],\n                          global: false\n                      }], ["1", "transparent"],],\n                  },\n              },\n              axisTick: {\n                  show: true,\n                  lineStyle: {\n                      color: "#999",\n                  },\n                  distance: -25,\n              },\n              splitLine: {\n                  show: true,\n                  length: 10,\n                  lineStyle: {\n                      width: 2,\n                      color: "#999",\n                  },\n                  distance: -28,\n              },\n              detail: {\n                  show: false\n              },\n          },\n      },\n      value1: -30, //  初始值区间必须-30开始，这样每次更新区间，颜色渐变都是从区间开始，如果默认值是-30~50，区间显示渐变色一开始就绘制全部范围,之后区间改变渐变色不会跟随变化\n      value2: -30,\n      valueData1: 0,\n      valueData2: 0,\n      arr: [],\n    };\n  },\n  created() {\n    const num = 8 * 10; //  分割为8个区间，每个区间5格,每格代表2，直接生成80个格子，每个格子代表一个温度，每个温度的区间就是0.0125\n    const arr = [];\n    for (let k = 0; k <= num; k++) {\n      let val = (k * 0.0125).toFixed(4);\n      arr.push({\n        value: -30 + k,\n        data: val,\n      });\n    }\n    this.arr = arr;\n  },\n  watch: {\n    value2: {\n      handler(value) {\n        this.value2 = value;\n        for (let k = 0; k < this.arr.length; k++) {\n          const item = this.arr[k];\n          if (item.value === value) {\n            this.valueData2 = item.data;\n            this.updateCharts(String(this.valueData1), String(item.data));\n            break;\n          }\n        }\n      },\n      deep: true,\n    },\n    value1: {\n      handler(value) {\n        // 区域划分是 0~1 终点是1，目前分割数是8，所以每一个大格是0.125，大格中的每5个小格是0.025，每10个小格是0.0125\n        this.value1 = value;\n        for (let k = 0; k < this.arr.length; k++) {\n          const item = this.arr[k];\n          if (item.value === value) {\n            this.valueData1 = item.data;\n            this.updateCharts(String(item.data), String(this.valueData2));\n            break;\n          }\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    randomClick() {\n      this.value2 = this.random(1, 50);\n      this.value1 = this.random(-30, 0);\n    },\n    random(min, max) {\n      return parseInt(Math.random() * (max - min + 1) + min, 10);\n    },\n    updateCharts(value1, value2) {\n      if (Number(value1) > Number(value2)) {\n        this.$Message.error("区间错误,起始值不能大于结束值,图表禁止渲染!!!");\n        return;\n      }\n      this.chart3.gaugeSection[0] = value1;\n      this.chart3.seriesBot.axisLine.lineStyle.color[0][0] = value1;\n      this.chart3.seriesTop.axisLine.lineStyle.color[0][0] = value1;\n      this.chart3.gaugeSection[1] = value2;\n      this.chart3.seriesBot.axisLine.lineStyle.color[1][0] = value2;\n      this.chart3.seriesTop.axisLine.lineStyle.color[1][0] = value2;\n      const option = {\n        series: this.$refs.chart3.getSeries(100),\n      };\n      this.$refs.chart3.updateOption(option, {\n        replaceMerge: ["series"],\n      });\n    },\n  },\n};\n<\/script>\n<style lang="less" scoped>\n.chartDemo {\n  width: 100%;\n  height: 400px;\n  margin: 0 20px 20px 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-shrink: 0;\n}\n.flex{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n .white{\n   color: #000;\n   margin-right: 10px;\n   background-color:#ffffff;\n }\n}\n</style>\n',keys:["echarts"]},{name:"文字倒影",code:'\n<template>\n  <div class="demo">\n    <div class="tips">Hello World!</div>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height: 100vh;\n  background-color: #000000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .tips {\n    position: relative;\n    color: #ffffff;\n    font-size: 40px;\n    font-weight: bold;\n    height: 50px;\n    line-height: 50px;\n  }\n  .tips::after {\n    position: absolute;\n    content: \'Hello World!\';\n    transform: rotateX(180deg) skewX(10deg);\n    bottom: -50px;\n    left: 0;\n    background: linear-gradient(to bottom,transparent 20%,#fff);\n    background-clip: text; // 指定背景的绘制区域为指定区域的前景文本区域,将设置的背景颜色限制在文字中\n    -webkit-background-clip: text;\n    color: transparent;\n  }\n}\n</style>',keys:["css"]},{name:"晃动的水滴",code:'\n<template>\n  <div class="demo">\n    <div id="water"></div>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo {\n  width: 500px;\n  height: 500px;\n  margin: 100px auto 0 auto;\n  background-color: #00a8ff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  #water{\n    width: 300px;\n    height: 300px;\n    margin-top: 30px;\n    border-radius: 59% 41% 63% 37% / 22% 26% 74% 78%;\n    box-shadow: inset 10px 20px 30px rgba(0,0,0,0.5),\n                      10px 10px 20px rgba(0,0,0,0.3),\n                      15px 15px 30px rgba(0,0,0,0.05),\n                inset -10px -10px 15px rgba(255,255,255,0.8);\n    // inset:可选。关键字，将外部投影(默认outset)改为内部投影。inset 阴影在背景之上，内容之下\n    animation: action 3s linear infinite alternate;\n  }\n  #water::after{\n    content: \'\';\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    top: 280px;\n    left: 48%;\n    background-color: rgba(255,255,255,0.8);\n    border-radius: 50% 50% 63% 37% / 54% 63% 37% 46%; //  复合写法 (水平方向/垂直方向);\n  }\n    #water::before{\n    content: \'\';\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    top: 380px;\n    left: 47%;\n    background-color: rgba(255,255,255,0.8);\n    border-radius: 42% 58% 62% 37% / 63% 71% 29% 37%;\n  }\n  @keyframes action {\n    25%{\n      border-radius: 30% 70% 44% 56% / 42% 26% 74% 58%;\n    }\n    50%{\n      border-radius: 30% 70% 21% 79% / 57% 26% 74% 43%;\n    }\n    100%{\n      border-radius: 30% 70% 51% 49% / 33% 40% 60% 67%;\n    }\n  }\n}\n</style>',keys:["css"]},{name:"css液体加载动画",code:'\n<template>\n  <div class="demo">\n    <div class="loader">\n      <span style="--i: 1"></span>\n      <span style="--i: 2"></span>\n      <span style="--i: 3"></span>\n      <span style="--i: 4"></span>\n      <span style="--i: 5"></span>\n      <span style="--i: 6"></span>\n      <span style="--i: 7"></span>\n    </div>\n    <svg>\n      <filter id="gooey">\n          <feGaussianBlur in="SourceGraphic" stdDeviation="10" />\n          // feGaussianBlur标签用于创建一个高斯模糊效果\n          // in="SourceGraphic"这个部分定义了由整个图像创建效果\n          // stdDeviation属性定义模糊量\n          <feColorMatrix values="\n            1 0 0 0 0 \n            0 1 0 0 0 \n            0 0 1 0 0 \n            0 0 0 20 -10\n          " />\n          // feColorMatrix - 用于彩色滤光片转换\n      </filter>\n    </svg>\n  </div>\n</template>\n\n<style lang="less" scoped>\n.demo {\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  svg{\n    display: none;\n  }\n  .loader {\n    position: relative;\n    width: 200px;\n    height: 200px;\n    filter: url(#gooey);\n  }\n  .loader span {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    display: block;\n    animation: animate 4s ease-in-out infinite;\n    animation-delay: calc(0.2s * var(--i)); // delay 在这里相当于抽帧了\n  }\n  .loader span::before {\n    content: "";\n    position: absolute;\n    top: 0;\n    left: calc(50% - 20px);\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    box-shadow: 0 0 30px #03a9f4;\n    background: linear-gradient(#fce4ec, #03a9f4);\n  }\n  @keyframes animate {\n    0% {\n      transform: rotate(0deg);\n    }\n    50%,\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n}\n</style>',keys:["css","js"]},{name:"css裁减实现图形验证",code:'\n<template>\n  <div class="demo">\n    <div class="verify" :style="{ \'--moved\': moved }"></div>\n    <input\n      type="range"\n      class="range_input"\n      min="0"\n      max="315"\n      v-model="rangeValue"\n      @change="rangeChange"\n    />\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      rangeValue: 0,\n      moved: "0px",\n    };\n  },\n  watch: {\n    rangeValue(value) {\n      this.moved = value + "px";\n    },\n  },\n  methods: {\n    rangeChange(value) {\n      // 允许的前后偏差设置为10px\n      if (value.target._value >= 185 && value.target._value <= 205) {\n        this.$Message.success("验证通过");\n        this.moved = \'195px\'\n      }else{\n        this.$Message.error("验证失败");\n      }\n    },\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  width: 500px;\n  height: 420px;\n  border: 1px solid #ededed;\n  margin: 20px auto;\n  border-radius: 4px;\n  .verify {\n    display: block;\n    width: 400px;\n    height: 300px;\n    background-image: url("https://i.postimg.cc/DzwZjwjx/back.jpg");\n    background-size: cover;\n    background-position: center;\n    margin: 40px auto 20px auto;\n    position: relative;\n    border-radius: 4px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  }\n  .verify::before,\n  .verify::after {\n    display: block;\n    position: absolute;\n    content: "";\n    width: inherit;\n    height: inherit;\n    background-image: inherit;\n    background-size: inherit;\n    background-position: inherit;\n    clip-path: inset(110px 120px 110px 200px);\n  }\n  .verify::after {\n    transform: translateX(calc(-195px + var(--moved))); // 通过变量 --moved 将js和css关联起来\n  }\n  .verify::before {\n    background-color: rgba(0, 0, 0, 0.6);\n    background-blend-mode: multiply; // 这个属性可以将背景颜色和背景图片混合起来\n  }\n  .range_input {\n    width: 400px;\n    border: 0;\n    display: block;\n    margin: 0 auto;\n  }\n}\n</style>',keys:["css","js"]},{name:"虚拟列表加载10万条数据",code:'\n<template>\n  <div class="demo">\n    <div class="scrollView" @scroll="onScroll" ref="list">\n      \x3c!-- 虚拟列表 --\x3e\n      <div class="virtualScroller" :style="{ height: listHeight + \'px\' }"></div>\n      <div\n        class="list"\n        :style="{ transform: `translateY(${this.startOffset}px)` }"\n      >\n        <div class="item" v-for="item in list" :key="item">\n         第 {{ item + 1 }} 行数据\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      list: [], // 每次展示6条数据\n      listHeight: 0, // 列表整体高度\n      itemSize: 50, // 列表项高度为50,那么只展示6条数据\n      containerHeight: 300, // 列表高度为300\n      data: [], // 所有数据\n      startOffset: 0, // 列表移动距离\n    };\n  },\n  mounted() {\n    // 初始化准备好10万条数据\n    const total = 100000;\n    const list = [];\n    for (let i = 0; i < total; i++) {\n      list.push(i);\n    }\n    this.listHeight = list.length * this.itemSize;\n    this.data = list;\n    this.list = list.slice(0, 6);\n  },\n  methods: {\n    onScroll() {\n      //当前滚动位置\n      let scrollTop = this.$refs.list.scrollTop;\n      // 列表开始索引\n      let startIndex = Math.floor(scrollTop / this.itemSize);\n      // 列表结束索引\n      let endIndex = Math.ceil(\n        (scrollTop + this.containerHeight) / this.itemSize\n      );\n      this.list = this.data.slice(startIndex, endIndex);\n      // 列表移动距离 重点!!!\n      this.startOffset = scrollTop - (scrollTop % this.itemSize);\n    },\n  },\n};\n<\/script>\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height: 600px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .scrollView {\n    width: 200px;\n    height: 300px;\n    background-color: #00a8ff;\n    overflow-y: scroll;\n    position: relative;\n    .list {\n      position: absolute;\n      top: 0;\n      left: 0;\n      .item {\n        height: 50px;\n        line-height: 50px;\n        color: #ffffff;\n        padding-left: 40px;\n      }\n    }\n  }\n}\n</style>',keys:["js"]},{name:"触发迅雷下载",code:'\n<template>\n  <div class="demo">\n    <a :href="hrefUrl">触发迅雷下载</a>\n  </div>\n</template>\n\n<script>\nexport default {\n  components: {},\n  data() {\n    return {\n      hrefUrl:null\n    };\n  },\n  methods: {},\n  mounted() {\n      const href = `https://mp-a8fcc9bb-1ab1-49d9-9618-0d4b1c300e0c.cdn.bspapp.com/images/back_url.jpg`\n      // btoa() 方法用于创建一个 base-64 编码的字符串,迅雷专用地址是用Base64位加密的，加密过程如下：在地址前后分别加上AA和ZZ，对新的字符串进行编码，最后拼接上thunder://即可\n      // 多册测试发现，只要AA存在即可唤醒迅雷并创建任务\n      const newHref = btoa(`AA${href}ZZ`)\n      this.hrefUrl = `thunder://${newHref}`\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height:420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  a{\n    color: #57a3f3;\n  }\n}\n</style>',keys:["js"]},{name:"Copy的禁用和解禁",code:'\n<template>\n  <div class="demo">\n    哈尔滨的哈，是哈利波特的哈。</br>\n    这个冬天，哈尔滨为了给游客们一个完美的冰雪世界，变成了尔滨先生。</br>\n    因为来玩的有相当比例是南方的小姑娘，哈尔滨还给她们起了一个专属称号“南方小金土豆”。</br>\n    这个称号可没有任何侮辱的意思，而是带着几分可爱，几分俏皮。</br></br>\n\n    解除禁止复制功能步骤：</br>\n    1、打开F12,,选中Element元素</br>\n    2、找到事件监听器 Event Listeners</br>\n    3、找到copy 相关事件删除即可\n  </div>\n</template>\n\n<script>\nexport default {\n  mounted() {\n    document.addEventListener("copy", (e) => {\n      e.preventDefault();\n      e.clipboardData.setData("text/plain", "我,秦始皇,打钱!!!"); // clipboardData对象可设置剪切板内容\n      this.$Message.success("恭喜复制成功");\n    });\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>',keys:["js"]},{name:"监听水印被篡改",code:'\n<template>\n  <div class="demo">\n    <div\n      class="water-mask-wrap"\n      id="elm"\n      style="\n        pointer-events: none;\n        width: 500px;\n        height: 500px;\n        background-color: rgba(0, 0, 0, 0.3);\n        overflow: hidden;\n        z-index: 999;\n      "\n    >\n      <div\n        v-for="index of repeatNum"\n        :key="\'water-mask\' + index"\n        style="\n          width: 33%;\n          font-size: 20px;\n          margin: 30px 0;\n          float: left;\n          transform: rotate(-45deg);\n          text-align: center;\n        "\n      >\n        {{ value }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      repeatNum: 30,\n      value: "水印-版权所有" + new Date().toLocaleString(),\n      ob: null,\n    };\n  },\n  mounted() {\n    // MutationObserver是JS的API，可以用于观察文档中的 DOM 树变化，并在这些变化发生时执行特定的回调函数\n    const ob = new MutationObserver((mutationsList) => {\n      this.$Message.warning(\'请不要乱动水印!!!\')\n    });\n    const elm = document.getElementById("elm");\n    ob.observe(elm, {\n      childList: true, // 子节点被添加、修改顺序或删除\n      attributes: true,  // 属性被添加、修改或删除  这里注意：一定要是style行内样式\n      characterData: true, // 标签的文本发生变化\n      subtree: true, // 后代节点\n    });\n    this.ob = ob;\n  },\n  beforeDestroy() {\n    this.ob.disconnect();\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>',keys:["js","MutationObserver"]},{name:"input-range自定义拖拽样式",code:'\n<template>\n  <div>\n    <div class="range_type_class" :style="{ width: domHeight + \'px\' }">\n      <input\n        type="range"\n        max="100"\n        v-model="slider_value"\n        @input="slider_change"\n        :style="{ width: domHeight + \'px\' }"\n      />\n      <div\n        class="range_type_class_one"\n        :style="{ width: slider_value + \'%\' }"\n      ></div>\n      <div class="range_type_class_two" :style="{ left: slider_left }">\n        <div></div>\n      </div>\n    </div>\n    <div>当前进度:{{ slider_value }}</div>\n    <div class="thinking">实现思路很简单：拖拽移动还是依靠range本身的属性，只不过将input本身设置为透明,层级设高一点，自定义轨道和拖拽按钮即可</div>\n    <div>当前示例已经封装成插件上传至NPM了,地址：https://www.npmjs.com/package/input-slide-style?activeTab=readme</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      slider_value: 0,\n      domHeight: 298,\n      slider_left:0\n    };\n  },\n  mounted() {},\n  methods: {\n    slider_change() {\n      this.slider_left = (((this.domHeight-22) / 100)*this.slider_value) +\'px\'\n    },\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.range_type_class {\n  height: 4px;\n  background: rgb(163 198 189);\n  border-radius: 0px 3px 3px 0px;\n  margin-top: 250px;\n  position: relative;\n  transform: rotate(90deg);\n}\n.range_type_class_two {\n  width: 22px;\n  height: 22px;\n  text-align: center;\n  cursor: pointer;\n  background: rgb(110 198 208);\n  border: 1px solid rgb(33 230 230);\n  position: absolute;\n  top: 0;\n  left: 30px;\n  z-index: 88;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  transform: translateY(-8px);\n  > div {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    border: 2px solid rgb(33 230 230);\n    background-color: #ffffff;\n  }\n}\n.range_type_class_one {\n  height: 4px;\n  background: rgb(60 181 195);\n  position: absolute;\n  top: 0;\n  z-index: 77;\n}\n\n/* 隐藏input */\n.range_type_class > input {\n  opacity: 0;\n  cursor: pointer;\n  height: 4px;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 99;\n  background-color: red;\n}\n\ninput[type="range"] {\n  -webkit-appearance: none;\n}\n\ninput[type="range"]:focus {\n  outline: none;\n}\n\ninput[type="range"]::-webkit-slider-thumb {\n  /* 设置这里是因为在隐藏之前需要看到 */\n  -webkit-appearance: none;\n  width: 22px;\n  height: 22px;\n  background: red;\n  border-radius: 0;\n}\n.thinking{\n  margin-top: 135px;\n}\n</style>',keys:["input","js"]},{name:"火云邪神",code:'\n<template>\n<div class="container">\n<video :src="flame" autoplay muted loop></video>\n<div class="txt">\n    火云邪神\n</div>\n</div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      flame: \'https://mp-a8fcc9bb-1ab1-49d9-9618-0d4b1c300e0c.cdn.bspapp.com/video/flame.mp4\',\n    };\n  },\n  mounted() {},\n  methods: {\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\nvideo {\n  width: 350px;\n}\n.txt {\n  color: #000;\n  font-size: 80px;\n  font-family: cursive;\n  font-weight: bold;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  left: 0;\n  top: 0;\n  z-index:99;\n  background: #fff;\n  padding-top: 50px;\n  mix-blend-mode: screen;\n}\n</style>',keys:["css","mix-blend-mode"]},{name:"vue-grid-layout拖拽",path:"Drag",keys:["drag","vue"]},{name:"侧边栏+毛玻璃效果",code:'\n<template>\n  <div>\n    <Button @click="showModel = true" type="primary">打开侧边栏</Button>\n    <div>主要实现是根据 backdrop-filter 属性</div>\n    <Drawer\n      title="侧边栏"\n      v-model="showModel"\n      width="600"\n      :mask-closable="false"\n      :transfer="false"\n    >\n      <div class="drawer-content">\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n        <div class="content-test">内容~</div>\n      </div>\n      <div class="drawer-footer" style="width: 600px; right: 0">\n        <div class="drawer-footer-bg"></div>\n        <Button\n          class="drawer-footer-reset"\n          style="margin-right: 13px"\n          v-scaleAnimate\n          @click="showModel = false"\n          >Cancel</Button>\n        <Button\n          class="drawer-footer-confirm"\n          type="primary"\n          v-scaleAnimate\n          @click="showModel = false"\n          >Submit</Button>\n      </div>\n    </Drawer>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      showModel: false\n    };\n  },\n  methods: {\n  }\n};\n<\/script>\n\n<style lang="less" scoped>\n.drawer-content {\n  padding: 0 0 95px 0;\n  .content-test {\n    background: #ededed;\n    min-height: 100px;\n    padding: 10px;\n    margin-bottom: 20px;\n  }\n}\n.drawer-footer {\n  height: 95px;\n  position: fixed;\n  bottom: 0;\n  z-index: 9;\n  padding-top: 32.5px;\n  text-align: center;\n  .drawer-footer-bg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    z-index: -1;\n    height: 100%;\n    background-color: rgba(255, 255, 255, 0.2);\n    backdrop-filter: blur(5px);\n  }\n}\n\n.drawer-footer-reset {\n  min-width: 100px;\n  height: 30px !important;\n  line-height: 25px !important;\n  border: 1px solid;\n  border-color: #3bc0ac;\n  border-radius: 25px !important;\n  color: #3bc0ac;\n}\n\n.drawer-footer-confirm {\n  min-width: 100px;\n  height: 30px !important;\n  line-height: 25px !important;\n  background: #3bc0ac;\n  border-radius: 25px !important;\n  color: #fff;\n  border-color: #3bc0ac;\n}\n</style>',keys:["css","backdrop-filter"]},{name:"AI打字机效果",code:'\n<template>\n  <div class="demo">\n    <TypeWriter :text="text" :speed="speed" :height="height" :isImplement="isImplement" class="m-b-20"></TypeWriter>\n    <TypeWriter :text="text" :speed="speed" :type="type" :height="height2" :isImplement="isImplement" class="m-b-20"></TypeWriter>\n    <TypeWriterPoptip :text="text2" :speed="speed" class="m-b-20"></TypeWriterPoptip>\n    <TypeWriterPoptip :text="text2" :speed="speed" :placement="placement" class="m-b-20"></TypeWriterPoptip>\n    <TypeWriterPoptip :text="text3" :speed="speed"></TypeWriterPoptip>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text:\'你好，我是AI提示的内容\',\n      text2:\'你好，我是AI提示的内容br你好，我是AI提示的内容br你好，我是AI提示的内容br我可以根据br换行\',\n      text3:\'你好，我是AI提示的内容br你好，我是AI提示的内容br你好，我是AI提示的内容br根据特定字符ar添加间隔线br,根据业务要求只能加一条\',\n      speed:30,\n      type:"02",\n      height:30,\n      height2:100,\n      isImplement:false,  //  是否默认显示文字\n      placement:\'right\'  // left  top  bottom  right\n    };\n  },\n  methods: {\n  }\n};\n<\/script>\n\n<style lang="less" scoped>\n  .m-b-20{margin-bottom:20px;}\n</style>',keys:["js"]},{name:"自定义iView tree树结构组件",code:'\n<template>\n  <div class="demo">\n    <div>\n      单选\n      <Tree\n        :data="treeData"\n        :render="renderContent"\n        class="demo-tree-render"\n        @on-select-change="selectTreeFun"\n      ></Tree>\n    </div>\n    <div>\n      多选包含子集\n      <Tree\n        show-checkbox\n        :data="treeData2"\n        :render="renderContent"\n        class="demo-tree-render"\n        @on-check-change="selectTreeFun2"\n      ></Tree>\n    </div>\n    <div>\n      多选不包含子集\n      <Tree\n        show-checkbox\n        check-strictly\n        :data="treeData3"\n        :render="renderContent"\n        class="demo-tree-render"\n        @on-check-change="selectTreeFun3"\n      ></Tree>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      treeData: [],\n      treeData2: [],\n      treeData3: [],\n      treeVal: [\n        {\n          children: [\n            {\n              children: [\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380101",\n                      id: "110038010101",\n                      title: "1-1-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380101",\n                      id: "110038010102",\n                      title: "1-1-2分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380101",\n                      id: "110038010103",\n                      title: "1-1-3分中心",\n                    },\n                  ],\n                  pid: "11003801",\n                  id: "1100380101",\n                  title: "1-1号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380102",\n                      id: "110038010201",\n                      title: "1-2-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380102",\n                      id: "110038010202",\n                      title: "1-2-2分中心",\n                    },\n                  ],\n                  pid: "11003801",\n                  id: "1100380102",\n                  title: "1-2号客户服务中心",\n                },\n              ],\n              pid: "16101",\n              id: "11003801",\n              title: "1号游乐场",\n            },\n            {\n              children: [\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380201",\n                      id: "110038020101",\n                      title: "2-1-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380201",\n                      id: "110038020102",\n                      title: "2-1-2分中心",\n                    },\n                  ],\n                  pid: "11003802",\n                  id: "1100380201",\n                  title: "2-1号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380202",\n                      id: "110038020201",\n                      title: "2-2-1分中心",\n                    },\n                  ],\n                  pid: "11003802",\n                  id: "1100380202",\n                  title: "2-2号客户服务中心",\n                },\n              ],\n              pid: "16101",\n              id: "11003802",\n              title: "2号游乐场",\n            },\n            {\n              children: [\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380301",\n                      id: "110038030101",\n                      title: "3-1-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380301",\n                      id: "110038030102",\n                      title: "3-1-2分中心",\n                    },\n                  ],\n                  pid: "11003803",\n                  id: "1100380301",\n                  title: "3-1号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380302",\n                      id: "110038030202",\n                      title: "3-2-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380302",\n                      id: "110038030203",\n                      title: "3-2-2分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380302",\n                      id: "110038030204",\n                      title: "3-2-3分中心",\n                    },\n                  ],\n                  pid: "11003803",\n                  id: "1100380302",\n                  title: "3-2号客户服务中心",\n                },\n              ],\n              pid: "16101",\n              id: "11003803",\n              title: "3号游乐场",\n            },\n            {\n              children: [\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380401",\n                      id: "110038040101",\n                      title: "4-1-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380401",\n                      id: "110038040102",\n                      title: "4-1-2分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380401",\n                      id: "110038040103",\n                      title: "4-1-3分中心",\n                    },\n                  ],\n                  pid: "11003804",\n                  id: "1100380401",\n                  title: "4-1号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380402",\n                      id: "110038040201",\n                      title: "4-2-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380402",\n                      id: "110038040202",\n                      title: "4-2-2分中心",\n                    },\n                  ],\n                  pid: "11003804",\n                  id: "1100380402",\n                  title: "4-2号客户服务中心",\n                },\n              ],\n              pid: "16101",\n              id: "11003804",\n              title: "4号游乐场",\n            },\n            {\n              children: [\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380501",\n                      id: "110038050101",\n                      title: "5-1-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380501",\n                      id: "110038050102",\n                      title: "5-1-2分中心",\n                    },\n                  ],\n                  pid: "11003805",\n                  id: "1100380501",\n                  title: "5-1号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380502",\n                      id: "110038050201",\n                      title: "5-2-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380502",\n                      id: "110038050202",\n                      title: "5-2-2分中心",\n                    },\n                  ],\n                  pid: "11003805",\n                  id: "1100380502",\n                  title: "5-2号客户服务中心",\n                },\n                {\n                  children: [\n                    {\n                      children: [],\n                      pid: "1100380503",\n                      id: "110038050301",\n                      title: "5-3-1分中心",\n                    },\n                    {\n                      children: [],\n                      pid: "1100380503",\n                      id: "110038050302",\n                      title: "5-3-2分中心",\n                    },\n                  ],\n                  pid: "11003805",\n                  id: "1100380503",\n                  title: "5-3号客户服务中心",\n                },\n              ],\n              pid: "16101",\n              id: "11003805",\n              title: "5号游乐场",\n            },\n            {\n              children: [],\n              pid: "16101",\n              id: "11003885",\n              title: "6号游乐场",\n            },\n            {\n              children: [],\n              pid: "16101",\n              id: "11003886",\n              title: "7号游乐场",\n            },\n            {\n              children: [],\n              pid: "16101",\n              id: "11003887",\n              title: "8号游乐场",\n            },\n          ],\n          pid: "11101",\n          id: "16101",\n          title: "游乐场公司",\n          expand: true,\n          selected: true,\n        },\n      ],\n    };\n  },\n  mounted() {\n    this.treeVal[0].expand = true;\n    this.treeData = JSON.parse(JSON.stringify(this.treeVal))\n    // 最外层的图标自定义打开样式\n    this.treeData[0].render = (h, { root, node, data }) => {\n      return h(\n        "span",\n        {\n          style: {\n            display: "inline-block",\n            width: "100%",\n          },\n        },\n        [\n          h("span", [\n            h("Icon", {\n              props: {\n                type: node.node.expand ? "ios-folder-outline" : "ios-folder",\n              },\n              style: {\n                color: "#feb238",\n                marginRight: "8px",\n              },\n            }),\n            h("span", data.title),\n          ]),\n        ]\n      );\n    };\n    this.treeData2 = JSON.parse(JSON.stringify(this.treeVal));\n    this.treeData2[0].render = (h, { root, node, data }) => {\n      return h(\n        "span",\n        {\n          style: {\n            display: "inline-block",\n            width: "100%",\n          },\n        },\n        [\n          h("span", [\n            h("Icon", {\n              props: {\n                type: node.node.expand ? "ios-folder-outline" : "ios-folder",\n              },\n              style: {\n                color: "#feb238",\n                marginRight: "8px",\n              },\n            }),\n            h("span", data.title),\n          ]),\n        ]\n      );\n    };\n    this.treeData3 = JSON.parse(JSON.stringify(this.treeVal))\n    this.treeData3[0].render = (h, { root, node, data }) => {\n      return h(\n        "span",\n        {\n          style: {\n            display: "inline-block",\n            width: "100%",\n          },\n        },\n        [\n          h("span", [\n            h("Icon", {\n              props: {\n                type: node.node.expand ? "ios-folder-outline" : "ios-folder",\n              },\n              style: {\n                color: "#feb238",\n                marginRight: "8px",\n              },\n            }),\n            h("span", data.title),\n          ]),\n        ]\n      );\n    };\n  },\n  methods: {\n    renderContent(h, { root, node, data }) {\n      return h(\n        "div",\n        {\n          style: {\n            display: "inline-block",\n            width: "100%",\n          },\n        },\n        [\n          h(\n            "div",\n            {\n              attrs: {\n                class: "width-omission",\n              },\n            },\n            [\n              h("Icon", {\n                props: {\n                  type:\n                    node.node.children.length === 0\n                      ? "ios-home"\n                      : node.node.expand\n                      ? "ios-folder-outline"\n                      : "ios-folder",\n                },\n                style: {\n                  color: node.node.children.length === 0 ? "#333" : "#feb238",\n                  marginRight: "8px",\n                },\n              }),\n              h(\n                "span",\n                {\n                  attrs: {\n                    class: "title-exceeding",\n                    title: data.title,\n                  },\n                },\n                data.title\n              ),\n            ]\n          ),\n          h("span", {\n            style: {\n              display: "inline-block",\n              float: "right",\n              marginRight: "32px",\n            },\n          }),\n        ]\n      );\n    },\n    selectTreeFun(value) {\n      console.log("单选", value);\n    },\n    selectTreeFun2(value) {\n      console.log("多选包含子集", value);\n    },\n    selectTreeFun3(value) {\n      console.log("多选不包含子集", value);\n    },\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n.demo {\n  display: flex;\n  width: 100%;\n  > div {\n    width: calc((100% - 20px)/3);\n    height: 500px;\n    padding: 10px;\n    overflow-y: auto;\n    overflow-x: hidden;\n    border: 1px solid #dddddd;\n    margin-right: 10px;\n  }\n  > div:last-child{\n    margin-right: 0;\n  }\n}\n</style>',keys:["js"]},{name:"优化html2canvas截图",code:'\n<template>\n  <div class="demo">\n    <div class="card-info" v-for="item in 5" :key="item">卡片内容</div>\n    <button @click="downloadImages">下载</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {};\n  },\n  mounted() {},\n    methods: {\n      downloadImages() {\n      let cardInfoElements = Array.from(\n        document.querySelectorAll(".card-info")\n      );\n      if (cardInfoElements.length > 0) {\n        const promises = cardInfoElements.map((element, index) => {\n          return window.html2canvas(element, {\n            allowTaint: false,\n            useCORS: true,\n            tainttest: true,\n            logging: true,\n            backgroundColor: null,\n            scale: 2, // 提供更高的分辨率\n            // 过滤不需要的节点，提升截图速度  根据自己项目实际情况如果太复杂，可以加入这段过滤 过滤条件记得改\n            //ignoreElements: (e) => {\n              //if (\n              //  e.contains(element) ||\n              //  element.contains(e) ||\n              //  e.tagName === "STYLE" ||\n              //  e.tagName === "LINK" ||\n              //  e.getAttribute("data-html2canvas") != null\n             // ) {\n            //  return false;\n            // }\n            // return true;\n           //},\n          }).then((canvas) => {\n            let pageData = canvas.toDataURL("image/jpeg", 1.0);\n            return pageData;\n          });\n        });\n        Promise.all(promises).then((pageDataArray) => {\n          pageDataArray.forEach((item, index) => {\n            let aTag = document.createElement("a");\n            aTag.download = `卡片${index + 1}`;\n            aTag.href = item;\n            aTag.click();\n          });\n        });\n      }\n    }\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  width: 100%;\n  height: 420px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  .card-info {\n    width: 100px;\n    height: 100px;\n    background: #feb238;\n    margin: 10px;\n    color: #000;\n  }\n}\n</style>',keys:["js","html2canvas"]},{name:"零宽字符-隐藏信息",code:'\n<template>\n  <div class="demo">\n    <h1>文本到隐藏字符转换</h1>\n    <p>原始字符串：{{ text }}</p>\n    <p>二进制：{{ binaryText }}</p>\n    <p>隐藏字符：{{ hiddenText }} 隐藏字符长度：{{ hiddenText.length }}</p>\n    <hr />\n    <p>隐形字符转二进制：{{hiddenText2}}</p>\n    <p>二进制转原始字符：{{binaryText2}}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: "我是一段原始字符串",\n      binaryText: "", // 二进制\n      hiddenText: "", // 隐藏字符\n      hiddenText2: "", // 隐形字符转二进制：\n      binaryText2: "", // 二进制转原始字符：\n    };\n  },\n  methods: {\n    // 转成二进制\n    textToBinary(text) {\n      return text\n        .split("")\n        .map(function (char) {\n          return char.charCodeAt(0).toString(2);\n        })\n        .join(" ");\n    },\n    // 隐藏字符\n    binaryToHiddenText(binary) {\n      return binary\n        .split("")\n        .map(function (binary_num) {\n          var num = parseInt(binary_num, 10);\n          if (num === 1) {\n            return "\\u200b";\n          } else if (num === 0) {\n            return "\\u200c";\n          }\n          return "\\u200d";\n        })\n        .join("\\ufeff");\n    },\n    // 隐形字符转二进制\n    hidden_text_2_binary(string) {\n      return string\n        .split("\\ufeff")\n        .map(function (char) {\n          if (char === "\\u200b") {\n            return "1";\n          } else if (char === "\\u200c") {\n            return "0";\n          }\n          return " ";\n        })\n        .join("");\n    },\n    // 二进制转原始字符\n    binary_2_Text(binaryStr) {\n      var text = "";\n      binaryStr\n        .split(" ")\n        .map(function (num) {\n          text += String.fromCharCode(parseInt(num, 2));\n        })\n        .join("");\n      return text.toString();\n    },\n  },\n  mounted() {\n    this.binaryText = this.textToBinary(this.text);\n    this.hiddenText = this.binaryToHiddenText(this.binaryText);\n    this.hiddenText2 = this.hidden_text_2_binary(this.hiddenText);\n    this.binaryText2 = this.binary_2_Text(this.hidden_text_2_binary(this.hiddenText));\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>',keys:["二进制"]},{name:"导出PDF",code:'\n<template>\n  <div class="demo">\n     <Button type="primary" @click="downloadPDF">导出pdf</Button>\n     <div id="pdfContainer">\n      <div class="test">\n        我是内容我是内容我是内容我是内容我是内容我是内容我是内容我是内容\n      </div>\n     </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n    };\n  },\n  methods: {\n    downloadPDF() {\n      this.$pdf(document.querySelector("#pdfContainer"), \'文件名\');\n    },\n  },\n  mounted() {\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo {\n  .test{\n    width:100%;\n    height: 40px;\n    margin-bottom: 30px;\n    font-size: 30px;\n    color: #000;\n  }\n}\n</style>',keys:["jspdf","html2canvas"]},{name:"SM4加解密",code:'\n<template>\n  <div class="demo">\n    <p>密钥:</p>\n    <p class="m-b-10">首先生成16位key值,一般由后端提供，前后端需要保持一致</p>\n    <p>cipherMode加密类型:</p>\n    <p>CBC = 1 密码块链</p>\n    <p>ECB = 2 电子密码本</p>\n    <p>OFB = 3 输出反溃模式</p>\n    <p>CFB = 4 密码反馈模式</p>\n    <p class="m-b-10">CTS = 5 记数模式</p>\n    <p>cipherType:</p>\n    <p>base64: 适合在文本环境中传输和存储加密数据</p>\n    <p>hex: 适合需要紧凑表示二进制数据的场景</p>\n    <p>utf8: 适合需要直接处理 Unicode 字符的场景</p>\n    <p class="m-b-10">binary: 适合需要处理原始二进制数据的场景</p>\n    <p>加密前：Bright</p>\n    <p class="m-b-10">加密后：{{ name }}</p>\n    <p>加密前：学,然后知不足</p>\n    <p class="m-b-10">加密后：{{ motto }}</p>\n    <p>\n      解密前:\n      FzQbH/P8DFEZSJVgHSsnOo6+XQghpLEfbMPfbk+QE78Y5GIDPFfv1pc4Qfh6WINZ1/dguw9JTF6rYm6FlOrRyQ==\n    </p>\n    <p>解密后: {{ encryption_info }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      name: "",\n      motto: "",\n      encryption_info: "",\n      sm4Config: {\n        key: "933ca860c4d00c42", // 密钥 16位的key\n        mode: "ecb", //  加密模式 个人感觉 ecb和cbc用的比较多  cbc模式需要配合一个随机生成的16位iv向量\n        cipherType: "base64", // 表示加密后的输出将以 Base64 编码形式呈现\n      },\n    };\n  },\n  mounted() {\n    // this.$Sm4其实就是 const SM4 = require("gm-crypt").sm4 只是挂载在vue原型上\n    const sm4 = new this.$SM4(this.sm4Config);\n    this.name = sm4.encrypt("Bright");\n    this.motto = sm4.encrypt("学,然后知不足");\n    // 解密\n    this.encryption_info = sm4.decrypt(\n      "FzQbH/P8DFEZSJVgHSsnOo6+XQghpLEfbMPfbk+QE78Y5GIDPFfv1pc4Qfh6WINZ1/dguw9JTF6rYm6FlOrRyQ=="\n    );\n  },\n};\n<\/script>\n\n<style lang="less" scoped>\n.demo{\n  .m-b-10{\n    margin-bottom: 10px;\n  }\n  .p-l-10{\n    padding-left: 10px;\n  }\n}\n</style>',keys:["gm-crypt"]},{name:"SM2加解密",code:'\n<template>\n  <div class="demo">\n    <p>公钥: {{ publicKey }}</p>\n    <p class="m-b-10">私钥: {{ privateKey }}</p>\n    <p>加密前: 人生如若初相见</p>\n    <p class="m-b-10">加密后: {{ encryptedText }}</p>\n    <p>解密前: {{ cryptoData }}</p>\n    <p>解密后: {{ decryptedText }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      cryptoData:"8d6b1479afc97a2ea0808639f6c528bc1c534f77e2038557f00b4c8d76de4a9261f9573e1c35d5bcc503e70abc9d9dd843c596db35fa7ba6d27935f4831d793a851304bfd034c983ff1f333921ec517e2bb81925116d423153169b62bbc83ff0781caabebafdd89befa81fe708588178bbc80a7a9ef76b17",\n      publicKey:"04f00fc1365f8bef05282dd3e9fba48cc1153e38fad670b812e180871396992dddd1e14b62e85a1548d0a6572339f0f3c92628bde1ed94843fba0812e162f1b554",\n      privateKey:"4febe1f4fb0b737e5607539e5b376afa28084c0ad812aa49645e09a60b6f384f",\n      encryptedText: "",\n      decryptedText: "",\n    };\n  },\n  mounted() {\n    // this.$Sm2其实就是 const SM2 = require("sm-crypto").sm2 只是挂载在vue原型上\n    let keypair = this.$SM2.generateKeyPairHex();\n    // this.publicKey = keypair.publicKey; // 公钥生成  加密使用  这样写是每次都动态生成 这里示例直接使用生成好的\n    // this.privateKey = keypair.privateKey; // 私钥生成  解密使用\n    this.encryptedText = this.$SM2.doEncrypt("人生如若初相见", this.publicKey);\n    this.decryptedText = this.$SM2.doDecrypt(this.cryptoData, this.privateKey);\n  },\n};\n<\/script>\n\n<styl lang="less" scoped>\n.demo{\n  .m-b-10{\n    margin-bottom: 10px;\n  }\n  .p-l-10{\n    padding-left: 10px;\n  }\n}\n</style>',keys:["sm-crypto"]},{name:"Canvas签名",code:'\n<template>\n  <div class="demo">\n    <div class="content">\n      <canvas id="canvas" :width="width" :height="height" />\n    </div>\n    <div class="btn">\n      <button @click="clearCanvas()">清除</button>\n      <button @click="save()">保存</button>\n    </div>\n  </div>\n</template>\n \n<script>\nexport default {\n  data() {\n    return {};\n  },\n  props: {\n    // 画布宽度\n    width: {\n      type: Number,\n      default: window.innerWidth - 40,\n    },\n    // 画布高度\n    height: {\n      type: Number,\n      default: 250,\n    },\n    // 笔触半径\n    radius: {\n      type: Number,\n      default: 10,\n    },\n    // 笔触颜色\n    color: {\n      type: String,\n      default: "#000",\n    },\n    // 画布填充背景\n    fillStyle: {\n      type: String,\n      default: "#ccc",\n    },\n  },\n  created() {},\n  mounted() {\n    this.int();\n  },\n  methods: {\n    // 绘制涂擦效果圆形\n    // @param { integer } 圆心的x坐标\n    // @param { integer } 圆心的y坐标\n    // @param { integer } 圆心半径\n    // @param { string } 填充的颜色\n    fillCircle(ctx, x, y, radius, fillColor) {\n      ctx.fillStyle = fillColor || this.color;\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.arc(x, y, radius, 0, Math.PI * 2, false); // 标准画圆\n      ctx.fill();\n    },\n    // 保存图片\n    save(name = "签名图片") {\n      let imgBase64 = this.canvas.toDataURL("image/png"); // 获取截图base64, 1表示质量(无损压缩)\n      let a = document.createElement("a");\n      a.download = name + ".png"; // 必须要设置download属性才能够直接下载base64图片\n      a.href = imgBase64;\n      a.click(); // 触发点击，起到下载效果\n    },\n    // 清除画布\n    clearCanvas() {\n      let canvas = this.canvas;\n      canvas.getContext("2d").fillStyle = this.fillStyle;\n      canvas.getContext("2d").fillRect(0, 0, this.width, this.height);\n    },\n    // 数据初始化\n    int() {\n      this.canvas = document.querySelector("#canvas");\n      let ctx = this.canvas.getContext("2d");\n      let move = false; // 按下标识\n      ctx.fillStyle = this.fillStyle;\n      ctx.fillRect(0, 0, this.width, this.height);\n      // 事件兼容PC 移动端\n      let eventStart = "ontouchstart" in document ? "touchstart" : "mousedown";\n      let eventMove = "ontouchmove" in document ? "touchmove" : "mousemove";\n      let eventEnd = "ontouchend" in document ? "touchend" : "mouseup";\n      this.canvas.addEventListener(\n        eventStart,\n        (e) => {\n          let sx = e.touches ? e.touches[0].pageX : e.pageX;\n          let sy = e.touches ? e.touches[0].pageY : e.pageY;\n          move = true;\n          this.fillCircle(ctx, sx, sy, this.radius);\n        },\n        false\n      );\n      this.canvas.addEventListener(\n        eventMove,\n        (e) => {\n          let sx = e.touches ? e.touches[0].pageX : e.pageX;\n          let sy = e.touches ? e.touches[0].pageY : e.pageY;\n          move && this.fillCircle(ctx, sx, sy, this.radius);\n        },\n        false\n      );\n      this.canvas.addEventListener(\n        eventEnd,\n        (e) => {\n          move = false;\n        },\n        false\n      );\n    },\n  },\n};\n<\/script>\n<style lang="less" scoped>\n.demo {\n  .btn {\n    width: 100%;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    >button:nth-child {\n    cursor: pointer;\n    }\n    button {\n      height: 30px;\n      width: 60px;\n      font-size: 20px;\n      border: 1px solid #dddddd;\n      border-radius: 4px;\n      margin-right: 10px;\n    }\n  }\n}\n</style>',layout:"top",keys:["Canvas"]},{name:"BigNumber",code:"\n<template>\n  <div class=\"demo\">\n    <p>js中超过16位数字后精度会丢失</p>\n    <p>对于需要高精度计算的场景，比如金融应用、科学计算等，使用 bignumber.js 库是一个常见的解决方案</p>\n    <p>加法计算结果: {{ sum }}</p>\n    <p>减法计算结果: {{ difference }}</p>\n    <p>乘法计算结果: {{ product }}</p>\n    <p>除法计算结果: {{ quotient }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      sum:'',\n      difference:'',\n      product:'',\n      quotient:'',\n    };\n  },\n  mounted() {\n    // this.$BigNumber 其实就是引入 import BigNumber from 'bignumber.js' 只是挂载在vue原型上\n      let a= new this.$BigNumber(12345678901234567890)\n      let b= new this.$BigNumber('12345678901234567890')\n      // 加法\n      let sum = a.plus(b);\n      this.sum = sum.toString()\n      // 减法\n      let difference = a.minus(b);\n      this.difference = difference.toString()\n      // 乘法\n      let product = a.times(b);\n      this.product = product.toString()\n      // 除法\n      let quotient = a.dividedBy(b);\n      this.quotient = quotient.toString()\n  },\n};\n<\/script>\n\n<styl lang=\"less\" scoped>\n</style>",keys:["bignumber.js"]},{name:"JS获取文件夹内容",code:'\n<template>\n  <div class="demo">\n    <button @click="openFiles">打开文件夹</button>\n    <div>{{message}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message:\'\'\n    };\n  },\n  mounted() {\n  },\n  methods:{\n    async openFiles() {\n      try {\n        // 获取文件夹句柄\n        const handler = await showDirectoryPicker();\n        const root = await this.processHandle(handler);\n        // 获取文件内容\n        const file = await root.children[1].getFile();\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          this.message = e.target.result\n        };\n        reader.readAsText(file, "utf-8");\n      } catch {\n        console.log("用户拒绝站点查看文件内容");\n      }\n    },\n    async processHandle(handle){\n      if(handle.kind === \'file\'){\n        return handle\n      }\n      handle.children = []\n      // 获取文件夹中所有内容\n      const iter = await handle.entries()\n      // iter 异步迭代器\n      for await (const info of iter){\n        // 递归处理文件夹中的内容\n        const subHandle = await this.processHandle(info[1])\n        handle.children.push(subHandle)\n      }\n      return handle\n    },\n  }\n};\n<\/script>\n\n<styl lang="less" scoped>\n</style>',keys:["showDirectoryPicker"]},{name:"简易3D环绕效果",code:"<template>\n  <div class=\"demo\">\n    <div class=\"entire-content\">\n      <div class=\"bd-bg-center-1\"></div>\n      <div class=\"content-carrousel\">\n        <div\n          class=\"shadow\"\n          :style=\"{\n            transform:\n              'rotateY(' +\n              index * (360 / arr.length) +\n              'deg) translateZ(290px)',\n          }\"\n          v-for=\"(item, index) in arr\"\n        >\n          {{ item }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      arr: ['苹果','香蕉','西红柿','西瓜','哈密瓜'],\n    };\n  },\n};\n<\/script>\n<style lang=\"less\" scoped>\n.demo {\n  width: 100%;\n  height: 100vh;\n  box-sizing: border-box;\n  background-color: #012050;\n}\n.entire-content {\n  margin: auto;\n  width: 80px;\n  perspective: 1000px;\n  position: relative;\n  padding-top: 80px;\n  transform-style: preserve-3d;\n  transform: rotateX(-2deg);\n}\n.bd-bg-center-1 {\n  height: 600px;\n  width: 600px;\n  position: absolute;\n  top: 10px;\n  left: calc((100% - 80px) / 2 + 40px);\n  transform: translate(-50%, 0);\n  pointer-events: none;\n  z-index: 1;\n  border-radius: 50%;\n  background: url('https://i.postimg.cc/DZV473Mg/globe.png');\n  background-size: 100% 100%;\n}\n\n.content-carrousel {\n  width: 100%;\n  position: absolute;\n  top: 200px;\n  left: 0;\n  float: right;\n  transform-origin: 50% 50%;\n  animation: rotar 18s infinite linear;\n  transform-style: preserve-3d;\n}\n.content-carrousel:hover {\n  animation-play-state: paused;\n  cursor: pointer;\n}\n.content-carrousel:hover .shadow {\n  animation-play-state: paused !important;\n}\n.content-carrousel div {\n  width: 100%;\n  height: 80px;\n  position: absolute;\n}\n.shadow {\n  width: 120px;\n  height: 120px;\n  line-height: 80px;\n  text-align: center;\n  border-radius: 50%;\n  border-radius: 50%;\n  position: relative;\n  background: radial-gradient(\n    circle at 30% 30%,\n    #ffffff 10%,\n    #9ee5fa 80%,\n    #399dfa 100%\n  );\n  box-shadow: 0 0 8px rgb(158, 229, 250);\n}\n@keyframes rotar {\n  from {\n    transform: rotateY(0deg);\n  }\n\n  to {\n    transform: rotateY(360deg);\n  }\n}\n</style>",keys:["css"]},{name:"简易的位运算判断权限",code:'<template>\n  <div class="demo">\n    <div>\n      权限组合，4项权限，每项有存在和不存在两种状态， 2的4次方，16种组合\n    </div>\n    <div>如果使用这种方式，缺点很明显</div>\n    <div>1、存储占用更大（数组 vs 单个数字）</div>\n    <div>2、权限检查、增删效率较低（需要遍历或查找）</div>\n    <div>3、不适合大规模权限系统（如 Linux 的 12 种文件权限）</div>\n    <div>为什么二进制位运算更适合权限控制？</div>\n    <div>1、储存高效</div>\n    <div>2、易维护</div>\n    <div>3、扩展性强</div>\n    <div>{read, write, create, delete} 1111 就可以表示拥有了所有权限</div>\n    <div class="red">权限值：{{ permission }}</div>\n    <div>是否存在读取权限：{{ boolOne }}</div>\n    <div>是否存在删除权限：{{ boolTwo }}</div>\n    <Button type="primary" @click="deleteFun">删除权限</Button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      obj: {\n        read: 1, // 二进制: 0001 (第0位为1)\n        write: 2, // 二进制: 0010 (第1位为1)\n        create: 4, // 二进制: 0100 (第2位为1)\n        delete: 8, // 二进制: 1000 (第3位为1)\n      },\n      p: null,\n      permission: null,\n      boolOne: null,\n      boolTwo: null,\n    };\n  },\n  methods: {\n    /**\n     * 检查目标权限是否包含特定权限\n     * @param {number} target - 当前权限值（多个权限的组合值）\n     * @param {number} permission - 要检查的单个权限值\n     * @returns {boolean} - 是否拥有该权限\n     */\n    hasPermission(target, permission) {\n      // 按位与(&)运算原理：\n      return (target & permission) === permission;\n    },\n    deleteFun() {\n      // 通过按位异或(^)删除权限（需要先确认权限存在，否则使用 ^ 会添加上）\n      // 如果p当前有delete权限：0011 ^ 1000 = 1011\n      // 删除操作的本质 相同则取0，上面1，下面1，最终结果0，不同取1\n      // 1 0 1 1\n      // ^\n      // 1 0 0 0\n      // ---------\n      // 0 0 1 1\n      this.p = this.p ^ this.obj.delete;\n      this.permission = this.p.toString(2).padStart(4, "0");\n      this.boolTwo = this.hasPermission(this.p, this.obj.delete);\n    },\n  },\n  mounted() {\n    // 权限标志位对象（使用二进制位表示不同权限）\n    // 每个权限值都是2的幂次方，保证二进制表示中只有一位是1\n    // 通过按位或(|)运算合并权限\n    // p 的二进制值将是 this.obj.read | this.obj.write = 0001 | 0010 = 0011 (十进制3)\n    this.p = this.obj.read | this.obj.write | this.obj.delete;\n    this.permission = this.p.toString(2).padStart(4, "0");\n    this.boolOne = this.hasPermission(this.p, this.obj.read);\n  },\n};\n<\/script>\n\n<styl lang="less" scoped>\n.red{\n  color: red;\n}\n</style>',keys:["二进制"]},{name:"简易日历及JSON视图展示",path:"Calendar",keys:["js"]},{name:"Canvas流光线条效果",code:"<template>\n<div \n  ref=\"container\"\n  class=\"canvas-container\"\n  :style=\"{\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    width: '500px',\n    height: '500px',\n    background: '#000',\n    margin: '0',\n    overflow: 'hidden'\n  }\"\n  @mouseenter=\"handleMouseEnter\"\n  @mouseleave=\"handleMouseLeave\"\n>\n  <canvas ref=\"canvas\"></canvas>\n</div>\n</template>\n\n<script>\nexport default {\ndata() {\n  return {\n    trails: [],\n    hue: 0,\n    lastMove: 0,\n    resizeTimeout: null,\n    animationFrame: null,\n    isHovering: false,\n    containerRect: null\n  }\n},\nmounted() {\n  this.initCanvas()\n  this.updateContainerRect()\n  this.addEventListeners()\n  this.animate()\n},\nbeforeDestroy() {\n  this.removeEventListeners()\n},\nmethods: {\n  initCanvas() {\n    const canvas = this.$refs.canvas\n    canvas.width = 500\n    canvas.height = 500\n  },\n  updateContainerRect() {\n    this.containerRect = this.$refs.container.getBoundingClientRect()\n  },\n  addEventListeners() {\n    window.addEventListener('resize', this.handleResize)\n    window.addEventListener('mousemove', this.handleMouseMove)\n  },\n  removeEventListeners() {\n    window.removeEventListener('resize', this.handleResize)\n    window.removeEventListener('mousemove', this.handleMouseMove)\n    cancelAnimationFrame(this.animationFrame)\n  },\n  handleResize() {\n    clearTimeout(this.resizeTimeout)\n    this.resizeTimeout = setTimeout(() => {\n      this.initCanvas()\n      this.updateContainerRect()\n    }, 200)\n  },\n  handleMouseEnter() {\n    this.isHovering = true\n    this.updateContainerRect()\n  },\n  handleMouseLeave() {\n    this.isHovering = false\n    this.trails = [] // 清空离开时的轨迹\n  },\n  handleMouseMove(e) {\n    if (!this.isHovering) return\n    \n    const now = Date.now()\n    if (now - this.lastMove > 16) {\n      // 计算相对容器坐标\n      const x = e.clientX - this.containerRect.left\n      const y = e.clientY - this.containerRect.top\n      \n      // 添加边界限制\n      if (\n        x >= 0 && x <= this.containerRect.width &&\n        y >= 0 && y <= this.containerRect.height\n      ) {\n        this.trails.push(new Trail(x, y))\n        if (this.trails.length > 25) this.trails.shift()\n        this.lastMove = now\n      }\n    }\n  },\n  animate() {\n    const canvas = this.$refs.canvas\n    const ctx = canvas.getContext('2d')\n    const bufferCanvas = document.createElement('canvas')\n    bufferCanvas.width = canvas.width\n    bufferCanvas.height = canvas.height\n    const bufferCtx = bufferCanvas.getContext('2d')\n\n    // 双缓冲绘制\n    bufferCtx.fillStyle = 'rgba(0, 0, 0, 0.08)'\n    bufferCtx.fillRect(0, 0, bufferCanvas.width, bufferCanvas.height)\n\n    this.trails.forEach((trail, index) => {\n      const next = this.trails[index + 1]\n      if (next) {\n        bufferCtx.beginPath()\n        bufferCtx.lineWidth = trail.radius\n        bufferCtx.lineCap = 'round'\n        bufferCtx.lineJoin = 'round'\n\n        const gradient = bufferCtx.createLinearGradient(\n          trail.x, trail.y,\n          next.x, next.y\n        )\n        gradient.addColorStop(0, `hsla(${trail.hue}, 100%, 50%, ${trail.alpha})`)\n        gradient.addColorStop(1, `hsla(${next.hue}, 100%, 50%, ${next.alpha * 0.6})`)\n\n        bufferCtx.shadowColor = `hsl(${trail.hue}, 100%, 50%)`\n        bufferCtx.shadowBlur = 15\n        bufferCtx.strokeStyle = gradient\n        bufferCtx.moveTo(trail.x, trail.y)\n        bufferCtx.lineTo(next.x, next.y)\n        bufferCtx.stroke()\n      }\n\n      trail.update()\n    })\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.drawImage(bufferCanvas, 0, 0)\n\n    this.hue = (this.hue + 1.2) % 360\n    this.animationFrame = requestAnimationFrame(this.animate)\n  }\n}\n}\n\nclass Trail {\nconstructor(x, y) {\n  this.x = x\n  this.y = y\n  this.hue = 0\n  this.radius = 30\n  this.alpha = 1\n}\nupdate() {\n  this.radius *= 0.85\n  this.alpha *= 0.93\n  this.hue += 4\n  this.x += (Math.random() - 0.5) * 2\n  this.y += (Math.random() - 0.5) * 2\n}\n}\n<\/script>\n\n<style scoped>\n.canvas-container {\n/* 添加点击事件隔离 */\npointer-events: auto;\n}\n.canvas-container canvas {\ndisplay: block;\n/* 修复光标闪烁 */\ncursor: none;\n}\n</style>",keys:["Canvas"]}]},64129:function(n,e,t){n.exports=t.p+"assets/icon46.eebbdbfc.png"}}]);